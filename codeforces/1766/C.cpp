/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author : Raj Karan Singh
 */


#include <bits/stdc++.h>
using namespace std;

#define int     int64_t
#define endl    '\n'
#define all(x)  x.begin(), x.end()
#define sz(x)   (int)x.size()
#define pp      pair<int,int>

template <typename A, typename B> istream& operator>>(istream &is, pair<A, B> &p) { return is >> p.first >> p.second; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>istream& operator >> (istream &is, T_container &v) {for(T &x : v) is >> x; return is;}
template <typename A, typename B>ostream &operator<<(ostream &os, const pair<A, B> &p){return os << '(' << p.first << ", " << p.second << ')';}
template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>ostream &operator<<(ostream &os, const T_container &v){    os << '{';string sep;for (const T &x : v)os << sep << x, sep = ", ";return os << '}';}

template<class T>
using min_heap = priority_queue<T,vector<T>,greater<T> >;
const int mod = 1e9 + 7, inf = 1e18L + 5, N = 2e5 + 5;
const string yes = "YES", no = "NO";

class CHamiltonianWall {
public:
        void solveOne(std::istream& in, std::ostream& out) {
            int m;
            in >> m;
            char g[2][m];
            int b = 0;
            for(int i = 0; i < 2; i++)
                for(int j  = 0; j < m; j++) {
                    in >> g[i][j];
                    if (g[i][j] == 'B')
                        b++;
                }
            int x = 0, y = 0;
            int vis[2][m];
            memset(vis, 0, sizeof(vis));
            vis[x][y] = 1;
            int cnt = 0;
            while(true) {
                if(g[x][y] == 'B') {
                    cnt++;
                    if (g[x ^ 1][y] == 'B' && vis[x ^ 1][y] == 0) {
                        vis[x ^ 1][y] = 1;
                        x ^= 1;
                    } else {
                        if (y + 1 < m && g[x][y + 1] == 'B' && vis[x][y + 1] == 0) {
                            vis[x][y + 1] = 1;
                            y = y + 1;
                        } else {
                            break;
                        }
                    }
                }
                else{
                    break;
                }
            }
            if(cnt == b){
                out << yes << endl;
                return;
            }
            x = 1, y = 0;
            memset(vis, 0, sizeof(vis));
            vis[x][y] = 1;
            cnt = 0;
            while(true) {
                if(g[x][y] == 'B') {
                    cnt++;
                    if (g[x ^ 1][y] == 'B' && vis[x ^ 1][y] == 0) {
                        vis[x ^ 1][y] = 1;
                        x ^= 1;
                    } else {
                        if (y + 1 < m && g[x][y + 1] == 'B' && vis[x][y + 1] == 0) {
                            vis[x][y + 1] = 1;
                            y = y + 1;
                        } else {
                            break;
                        }
                    }
                }
                else{
                    break;
                }
            }
            if(cnt == b){
                out << yes << endl;
                return;
            }

            out << no << endl;

        }
        void solve(std::istream& in, std::ostream& out) {
            int cases = 1;
            in >> cases;
            for (int tc = 1; tc <= cases; tc++) {
//                out << "Case #" << tc << ": ";
                solveOne(in , out);
            }
        }
};


signed main() {
        ios_base::sync_with_stdio(false);
	    CHamiltonianWall solver;
	    std::istream& in(std::cin);
	    std::ostream& out(std::cout);
	    in.tie(nullptr);
	    solver.solve(in, out);
	    return 0;
}
