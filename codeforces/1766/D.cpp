/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author : Raj Karan Singh
 */


#include <bits/stdc++.h>
using namespace std;

#define int     int64_t
#define endl    '\n'
#define all(x)  x.begin(), x.end()
#define sz(x)   (int)x.size()
#define pp      pair<int,int>

template <typename A, typename B> istream& operator>>(istream &is, pair<A, B> &p) { return is >> p.first >> p.second; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>istream& operator >> (istream &is, T_container &v) {for(T &x : v) is >> x; return is;}
template <typename A, typename B>ostream &operator<<(ostream &os, const pair<A, B> &p){return os << '(' << p.first << ", " << p.second << ')';}
template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>ostream &operator<<(ostream &os, const T_container &v){    os << '{';string sep;for (const T &x : v)os << sep << x, sep = ", ";return os << '}';}

template<class T>
using min_heap = priority_queue<T,vector<T>,greater<T> >;
const int mod = 1e9 + 7, inf = 1e18L + 5, N = 32000 + 5;
const string yes = "YES", no = "NO";


bitset<N> isprime;
vector<int> primes;
int m = 0;

class DLuckyChains {
public:
    void solveOne(std::istream& in, std::ostream& out) {
        int n;
        in >> n;
        while(n--) {
            int x, y;
            in >> x >> y;

            if (y - x == 1) {
                out << -1 << endl;
                continue;
            }
            if (__gcd(x, y) > 1) {
                out << 0 << endl;
                continue;
            }
            int d = (y - x);
            int ans = inf;
            int j = 0, pf = primes[j];
            while (d != 1 && (pf * pf) <= d) {
                if (d % pf == 0) {
                    ans = min(ans, ((x / pf + 1) * pf) - x);
                    while (d % pf == 0) d /= pf;
                }
                pf = primes[++j];
            }
            if (d != 1) {
                ans = min(ans, ((x / d + 1) * d) - x);
            }
            out << ans << endl;
        }


    }
    void solve(std::istream& in, std::ostream& out) {
        isprime.reset();
        isprime.flip();
        isprime[0] = 0, isprime[1] = 0;
        for(int i = 2; i <= N; i++) {
            if(isprime[i]) {
                for(int j = i * i; j <= N; j += i) {
                    isprime[j] = 0;
                }
                primes.push_back(i);
            }
        }
        int cases = 1;
//            in >> cases;
        for (int tc = 1; tc <= cases; tc++) {
//                out << "Case #" << tc << ": ";
            solveOne(in , out);
        }
    }
};


signed main() {
        ios_base::sync_with_stdio(false);
	    DLuckyChains solver;
	    std::istream& in(std::cin);
	    std::ostream& out(std::cout);
	    in.tie(nullptr);
	    solver.solve(in, out);
	    return 0;
}
